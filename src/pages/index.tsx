import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { HomePage } from "../components/pages/HomePage";
import { getAdminRegions } from "../utils/sqlQueries/adminRegions";
import { getDrivingLocationsData } from "../utils/sqlQueries/drivingLocations";
import type { LocationsType } from "../utils/types";

interface HomePageProps {
  topLocations: LocationsType[];
}

const Home: NextPage<HomePageProps> = ({topLocations}) => {
  return (
    <>
      <Head>
        <title>Explore Locations</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.svg" />
      </Head>
      <HomePage topLocations={topLocations} />
    </>
  );
};

export default Home;

export const getStaticProps: GetStaticProps<HomePageProps> = async () => {
  const topRegions = await getAdminRegions(
    `ORDER BY "Type" DESC LIMIT 20`
  );

  const topLocations = [];

  for (let i = 0; i < topRegions.length; i++) {
    const locations = await getDrivingLocationsData(
      `ON r."CountryFromName" = '${topRegions[i]?.Name || ""}' LIMIT 5`
    );
    topLocations.push({
      country: topRegions[i]?.Name || "",
      code: topRegions[i]?.Name || "",
      locations: locations.map((el) => ({
        from: el.RegionFromCityName,
        to: el.RegionToCityName,
      })),
    });
  }
  return {
    props: {
      topLocations: topLocations,
    },
  };
};
